

try:
    from datasets import load_dataset, Dataset
    from transformers import (
        GPT2TokenizerFast,
        GPT2ForTokenClassification, 
        AutoModelForTokenClassification,
        AutoTokenizer,
        TrainingArguments, 
        Trainer,
        DataCollatorForTokenClassification
    )
    import os
    import torch
    import numpy as np
    from sklearn.metrics import (
    accuracy_score, 
    precision_recall_fscore_support, 
    classification_report
)

except ModuleNotFoundError:
    print(f"Error: {e}")
    print("Please install required packages by running:")
    print("pip install -r requirements.txt")
    exit(1)

def load_propaganda_data(articles_dir, labels_dir):
    data_dict = {
        'text': [],
        'labels': []
    }
    
    for article_file in os.listdir(articles_dir):
        article_id = article_file.split('.')[0]
        label_file = os.path.join(labels_dir, f"{article_id}.labels")
        
        # Try UTF-8 first, fallback to latin-1
        try:
            with open(os.path.join(articles_dir, article_file), 'r', encoding='utf-8') as f:
                text = f.read()
        except UnicodeDecodeError:
            with open(os.path.join(articles_dir, article_file), 'r', encoding='latin-1') as f:
                text = f.read()
        
        # Initialize all tokens as non-propaganda (0)
        labels = [0] * len(text)
        
        if os.path.exists(label_file):
            try:
                with open(label_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        start, end = map(int, line.strip().split('\t')[:2])
                        # Mark propaganda spans as 1
                        for i in range(start, end):
                            labels[i] = 1
            except UnicodeDecodeError:
                with open(label_file, 'r', encoding='latin-1') as f:
                    for line in f:
                        start, end = map(int, line.strip().split('\t')[:2])
                        # Mark propaganda spans as 1
                        for i in range(start, end):
                            labels[i] = 1
        
        data_dict['text'].append(text)
        data_dict['labels'].append(labels)
        
    if not data_dict['text']:
        raise ValueError("No data loaded. Ensure the dataset paths are correct.")

    return Dataset.from_dict(data_dict)

def tokenize_and_align_labels(examples, tokenizer):
    tokenized_inputs = tokenizer(
        examples["text"],
        truncation=True,
        max_length=512,
        padding="max_length",
        return_tensors="pt"
    )

    labels = []
    for i, label in enumerate(examples["labels"]):
        word_ids = tokenized_inputs.word_ids(batch_index=i)
        label_ids = []
        previous_word_idx = None
        
        for word_idx in word_ids:
            if word_idx is None:
                label_ids.append(-100)
            else:
                if word_idx != previous_word_idx:
                    label_ids.append(label[word_idx])
                else:
                    label_ids.append(label[word_idx])
                previous_word_idx = word_idx
        
        labels.append(label_ids)

    tokenized_inputs["labels"] = labels
    return tokenized_inputs

def compute_metrics(pred):
    """
    Compute detailed metrics for token classification.
    """
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)

    # Flatten lists and remove ignored index (-100)
    labels_flat = [label for sublist in labels for label in sublist if label != -100]
    preds_flat = [pred for sublist, label_sublist in zip(preds, labels) 
                  for pred, label in zip(sublist, label_sublist) if label != -100]

    # Compute metrics
    accuracy = accuracy_score(labels_flat, preds_flat)
    precision, recall, f1, _ = precision_recall_fscore_support(
        labels_flat, preds_flat, average='binary'
    )
    
    # Detailed classification report
    report = classification_report(labels_flat, preds_flat)
    
    # Log metrics to a file
    with open('training_metrics.txt', 'w') as f:
        f.write("Detailed Classification Report:\n")
        f.write(report)
        f.write(f"\nAccuracy: {accuracy}")
        f.write(f"\nPrecision: {precision}")
        f.write(f"\nRecall: {recall}")
        f.write(f"\nF1 Score: {f1}")
    
    return {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1': f1
    }


def train_propaganda_detector():
    # Check CUDA availability
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # Initialize tokenizer and model
    tokenizer = AutoTokenizer.from_pretrained('distilgpt2')
    
    # Add padding token if not exists
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token
        tokenizer.pad_token_id = tokenizer.eos_token_id

    model = GPT2ForTokenClassification.from_pretrained('distilgpt2', num_labels=2)
    model.resize_token_embeddings(len(tokenizer))
    model.to(device)  # Move model to GPU

    # Load and prepare dataset
    dataset = load_propaganda_data(
        articles_dir='datasets/train-articles',
        labels_dir='datasets/train-labels-task1-span-identification'
    )
    
    # Tokenize and align labels
    tokenized_dataset = dataset.map(
        lambda x: tokenize_and_align_labels(x, tokenizer),
        batched=True,
        remove_columns=dataset.column_names
    )

    # Split dataset
    train_test_split = tokenized_dataset.train_test_split(test_size=0.1)
    
    # Define training arguments
    training_args = TrainingArguments(
        output_dir="propaganda_detector_outputs",
        eval_strategy="epoch",
        logging_dir="propaganda_detector_outputs/logs",
        logging_strategy="epoch",
        save_strategy="epoch",
        learning_rate=5e-5,
        per_device_train_batch_size=16, 
        per_device_eval_batch_size=16, # Reduce for when using GPU
        auto_find_batch_size=True,
        num_train_epochs=1,
        weight_decay=0.01,
        push_to_hub=False,
        load_best_model_at_end=True,
        metric_for_best_model="f1",
        fp16=False,  # True For GPU efficiency
        logging_steps=10,
        save_total_limit=5,  # Keep only the last 5 model checkpoints
    )

    # Initialize data collator
    data_collator = DataCollatorForTokenClassification(
        tokenizer=tokenizer,
        padding=True,
        return_tensors="pt"
    )

    # Initialize trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_test_split["train"],
        eval_dataset=train_test_split["test"],
        processing_class=tokenizer,
        data_collator=data_collator,
        compute_metrics=compute_metrics,
    )

    # Train the model
    train_result = trainer.train()
    
    # Save training metrics
    metrics = train_result.metrics
    trainer.log_metrics("train", metrics)
    trainer.save_metrics("train", metrics)
    
    # Save the model
    trainer.save_model("propaganda_detector_final")
    tokenizer.save_pretrained("propaganda_detector_final")
    
    return trainer

if __name__ == "__main__":
    train_propaganda_detector()

def test_propaganda_detector():
    # Load the trained model and tokenizer
    model = AutoModelForTokenClassification.from_pretrained("propaganda_detector_final")
    tokenizer = AutoTokenizer.from_pretrained("propaganda_detector_final")

    # Load dev dataset
    dev_dataset = load_propaganda_data(
        articles_dir='datasets/dev-articles',
        labels_dir='datasets/dev-labels-task1-span-identification'
    )

    # Tokenize and align labels for dev set
    tokenized_dev = dev_dataset.map(
        lambda x: tokenize_and_align_labels(x, tokenizer),
        batched=True,
        remove_columns=dev_dataset.column_names
    )

    # Initialize trainer for evaluation
    trainer = Trainer(
        model=model,
        tokenizer=tokenizer,
        data_collator=DataCollatorForTokenClassification(
            tokenizer=tokenizer,
            padding=True,
            return_tensors="pt"
        ),
        compute_metrics=compute_metrics,
    )

    # Log detailed results
    with open('dev_evaluation_results.txt', 'w') as f:
        f.write("\nDetailed Evaluation Results on Dev Set:\n")
        for key, value in results.items():
            f.write(f"{key}: {value}\n")
    
    print("\nEvaluation Results on Dev Set:")
    print(f"Loss: {results['eval_loss']:.4f}")

if __name__ == "__main__":
    # Train the model and get trainer
    trainer = train_propaganda_detector()
    
    # Test the model
    test_propaganda_detector()
    